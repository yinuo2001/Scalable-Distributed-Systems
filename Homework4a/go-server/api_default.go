/*
 * Album Store API
 *
 * CS6650 Fall 2023
 *
 * API version: 1.0.0
 * Contact: i.gorton@northeasern.edu
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"path/filepath"
	"strconv"

	"github.com/gorilla/mux"
)

type Album struct {
	AlbumID   int    `json:"albumID"`
	Artist    string `json:"artist"`
	Title     string `json:"title"`
	Year      int    `json:"year"`
	ImageSize string `json:"imageSize"`
	ImageType string `json:"imageType"`
}

type Profile struct {
	Artist string `json:"artist"`
	Title  string `json:"title"`
	Year   int    `json:"year"`
}

type GetResponse struct {
	Artist string `json:"artist"`
	Title  string `json:"title"`
	Year   int    `json:"year"`
}

type PostResponse struct {
	AlbumID   int    `json:"albumID"`
	ImageSize string `json:"imageSize"`
}

func GetAlbumByKey(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	ID, err := strconv.Atoi(vars["albumID"])
	if err != nil {
		http.Error(w, `{"msg": "Error parsing JSON"}`, http.StatusInternalServerError)
		return
	}

	jsonPath, _ := filepath.Abs("/usr/share/apache-tomcat-9.0.80/webapps/albums.json")
	jsonFile, err := os.ReadFile(jsonPath)
	if err != nil {
		http.Error(w, `{"msg": "File not found"}`, http.StatusNotFound)
		return
	}

	var albums []Album
	err = json.Unmarshal(jsonFile, &albums)
	if err != nil {
		fmt.Println("JSON Parse Error:", err)
		http.Error(w, `{"msg": "Error parsing JSON"}`, http.StatusInternalServerError)
		return
	}

	// Search for the album by ID
	for _, album := range albums {
		if album.AlbumID == int(ID) {
			w.Header().Set("Content-Type", "application/json")
			response := GetResponse{
				Artist: album.Artist,
				Title:  album.Title,
				Year:   album.Year,
			}
			json.NewEncoder(w).Encode(response)
			return
		}
	}

	// Album not found
	http.Error(w, `{"msg": "Album not found"}`, http.StatusNotFound)
}

func NewAlbum(w http.ResponseWriter, r *http.Request) {
	err := r.ParseMultipartForm(10 << 20) // 10MB file size limit
	if err != nil {
		http.Error(w, `{"msg": "Invalid form data"}`, http.StatusBadRequest)
		return
	}
	profileStr := r.FormValue("profile")
	if profileStr == "" {
		http.Error(w, `{"msg": "Missing profile field"}`, http.StatusBadRequest)
		return
	}

	var profile Profile
	err = json.Unmarshal([]byte(profileStr), &profile)
	if err != nil {
		http.Error(w, `{"msg": "Invalid profile format"}`, http.StatusBadRequest)
		return
	}

	file, fileHeader, err := r.FormFile("image")
	if err != nil {
		http.Error(w, `{"msg": "Missing image file"}`, http.StatusBadRequest)
		return
	}
	defer file.Close()

	// Read existing albums
	jsonPath, _ := filepath.Abs("/usr/share/apache-tomcat-9.0.80/webapps/albums.json")
	jsonFile, err := os.ReadFile(jsonPath)
	if err != nil {
		http.Error(w, `{"msg": "File not found"}`, http.StatusNotFound)
		return
	}

	var albums []Album
	json.Unmarshal(jsonFile, &albums)

	newAlbumID := len(albums) + 1

	imageSize := fmt.Sprintf("%d", fileHeader.Size)

	newAlbum := Album{
		AlbumID:   len(albums) + 1, // Keeping it as int for JSON storage
		Artist:    profile.Artist,
		Title:     profile.Title,
		Year:      profile.Year,
		ImageSize: imageSize,
		ImageType: fileHeader.Header.Get("Content-Type"),
	}

	// Append the new album and save back to file
	albums = append(albums, newAlbum)
	newJsonData, _ := json.MarshalIndent(albums, "", "  ")
	os.WriteFile(jsonPath, newJsonData, 0644)

	// Create response
	response := PostResponse{
		AlbumID:   newAlbumID,
		ImageSize: imageSize,
	}

	// Send response
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(response)
}
